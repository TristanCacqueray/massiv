sudo: false

# Do not choose a language; we provide our own build tools.
language: generic

cache:
  directories:
  #- $HOME/.ghc
  #- $HOME/.cabal
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/.stack-work
  - $TRAVIS_BUILD_DIR/massiv/.stack-work
  - $TRAVIS_BUILD_DIR/massiv-test/.stack-work
  timeout: 360

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis

  - env: GHC="8.4.3" RESOLVER="lts-12.14" STACK_YAML="stack-extra-deps.yaml"
    compiler: ": #stack GHC-8.4.3 (lts-12.14)"
    addons:
      apt:
        packages: [libgmp-dev]

  - env: GHC="8.4.4" RESOLVER="lts-12.26" STACK_YAML="stack-extra-deps.yaml"
    compiler: ": #stack GHC-8.4.4 (lts-12.26)"
    addons:
      apt:
        packages: [libgmp-dev]

  - env: GHC="8.6.3" RESOLVER="lts-13.9" STACK_YAML="stack-extra-deps.yaml"
    compiler: ": #stack GHC-8.6.3 (lts-13.9)"
    addons:
      apt:
        packages: [libgmp-dev]

  - env: GHC="8.6.4" RESOLVER="lts-13.19" STACK_YAML="stack-extra-deps.yaml"
    compiler: ": #stack GHC-8.6.4 (lts-13.19)"
    addons:
      apt:
        packages: [libgmp-dev]

  - env: GHC="8.6.5" RESOLVER="lts-13.30" STACK_YAML="stack-extra-deps.yaml"
    compiler: ": #stack GHC-8.6.5 (lts-13.30)"
    addons:
      apt:
        packages: [libgmp-dev]

  - env: GHC="8.6.5" RESOLVER="lts-14.27" COVERALLS_STACK_YAML="stack-extra-deps.yaml"
    compiler: ": #stack GHC-8.6.5 (lts-14.27)"
    addons:
      apt:
        packages: [libgmp-dev]

  - env: GHC="8.8.2" RESOLVER="lts-15.3"
    compiler: ": #stack GHC-8.8.2 (lts-15.3)"
    addons:
      apt:
        packages: [libgmp-dev]

  - env: GHC="8.8.3" RESOLVER="lts-15"
    compiler: ": #stack GHC-8.8.3 (lts-15)"
    addons:
      apt:
        packages: [libgmp-dev]

  # Nightly builds are allowed to fail
  - env: RESOLVER="nightly"
    compiler: ": #stack nightly"
    addons:
      apt:
        packages: [libgmp-dev]

  allow_failures:
  - env: RESOLVER="nightly"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

- mkdir -p ~/.local/bin
- |
  # script for restoring file modification times, so only changed modules get rebuilt
  travis_retry curl -s -L https://gist.githubusercontent.com/lehins/fd36a8cc8bf853173437b17f6b6426ad/raw/4702d0252731ad8b21317375e917124c590819ce/git-modtime.hs -o git-modtime.hs
  # get stack
  if [ "$TRAVIS_OS_NAME" = "osx" ]
  then
    travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

script:
- |
  set -ex
  #while [ true ] ; do echo "Prevent death by Travis due to no output"; sleep 540; done &
  # Restore modification time for cache utilization and install all needed depndencies
  stack script --resolver $RESOLVER git-modtime.hs --package base --package time --package directory --package process
  ARGS="--resolver $RESOLVER"
  BUILD_ARGS="--bench --no-run-benchmarks --haddock --no-haddock-deps"
  if [ -n "${COVERALLS_STACK_YAML}" ] && [ -n "${COVERALLS_REPO_TOKEN}" ]; then
     stack $ARGS --stack-yaml="$COVERALLS_STACK_YAML" test massiv-test:tests --coverage $BUILD_ARGS
     stack $ARGS --stack-yaml="$COVERALLS_STACK_YAML" hpc report --all
     travis_retry curl -L https://github.com/lehins/stack-hpc-coveralls/releases/download/0.0.5.0/shc.tar.gz | tar xz shc
     STACK_YAML="$COVERALLS_STACK_YAML" ./shc --repo-token=$COVERALLS_REPO_TOKEN combined custom
     if [ -z "$DOCTESTS_DISABLED" ]; then
       stack $ARGS --stack-yaml="$COVERALLS_STACK_YAML" test massiv:doctests --coverage $BUILD_ARGS
     fi
  else
    stack $ARGS test massiv-test:tests $BUILD_ARGS
    if [ -z "$DOCTESTS_DISABLED" ]; then
      stack $ARGS test massiv:doctests $BUILD_ARGS
    fi
  fi
  set +ex
